{"version":3,"sources":["modules/courses/AssignmentContainer.jsx"],"names":["AssignmentContainer","inject","observer","props","state","openPopup","this","match","assignments","fetch","params","id","Framework","getEventManager","on","constants","setState","prevProps","assignmentStatus","language","productId","errorStatus","isPending","isError","items","length","errorCode","error","open","isOpen","onClose","aria-labelledby","aria-describedby","loading","content","data","locale","currentLanguage","onPageClick","onNavigationChange","onDateChange","dateObject","invisibleBackdrop","loadingContent","errorContent","code","courseId","React","Component","injectIntl"],"mappings":"sSAkCMA,EAFLC,iBAAO,mBAAoB,cAAe,W,GAC1CC,mB,oDAYC,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAW,GAHI,E,qDAOnB,WAAqB,IAAD,OAClB,EAEIC,KAAKH,MADPI,EADF,EACEA,MADF,EACSC,YAEGC,MAAMF,EAAMG,OAAOC,IAC/BC,UAAUC,kBAAkBC,GAAGC,KAA8B,WAC3D,EAAKC,SAAS,CAAEX,WAAW,S,gCAI/B,SAAmBY,GACjB,MAEIX,KAAKH,MADPI,EADF,EACEA,MAAOC,EADT,EACSA,YAELS,EAAUV,MAAMG,OAAOC,KAAOJ,EAAMG,OAAOC,IAC7CH,EAAYC,MAAMF,EAAMG,OAAOC,M,oBAInC,WACE,MAEIL,KAAKH,MADPe,EADF,EACEA,iBAAkBV,EADpB,EACoBA,YAAaW,EADjC,EACiCA,SAEjC,EAHA,EAC2CZ,MAEXG,OAAxBC,EAAR,EAAQA,GAAIS,EAAZ,EAAYA,UACNC,KAAgBH,EAAiBI,WAAaJ,EAAiBK,SAChEf,EAAYgB,OAAsC,IAA7BhB,EAAYgB,MAAMC,SAChCP,EAAiBK,QACrBlB,EAAcC,KAAKF,MAAnBC,UACFqB,EAAYR,EAAiBS,OAASZ,KAE5C,OACE,6BACIV,GACF,kBAAC,IAAD,CACEuB,KAAMtB,KAAKH,MAAM0B,OACjBC,QAASxB,KAAKH,MAAM2B,QACpBC,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBrB,GAAG,4BACpB,kBAAC,iBAAD,CACEsB,QAASf,EAAiBI,UAC1BK,MAAON,EACPa,QACE,kBAAC,qBAAD,CACEC,KAAM3B,EAAYgB,MAClBY,OAAQjB,EAASkB,gBACjBT,KAAMtB,KAAKH,MAAM0B,OACjBC,QAASxB,KAAKH,MAAM2B,QACpBQ,YAAahC,KAAKH,MAAMoC,mBACxBC,aAAc,SAAAC,GAAU,OAAIA,GAC5BC,mBAAiB,IAGrBC,eACE,kBAAC,IAAD,MAEFC,aACE,kBAAC,IAAD,CAAWC,KAAMnB,EAAWoB,SAAUnC,EAAIS,UAAWA,c,GA7ErC2B,IAAMC,a,MAyFzBC,+BAAWjD","file":"static/js/14.fa8d3eef.chunk.js","sourcesContent":["/*\n * PEARSON PROPRIETARY AND CONFIDENTIAL INFORMATION SUBJECT TO NDA\n * Copyright Â© 2019 Pearson Education, Inc.\n * All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Pearson Education, Inc.  The intellectual and technical concepts contained\n * herein are proprietary to Pearson Education, Inc. and may be covered by U.S. and Foreign Patents,\n * patent applications, and are protected by trade secret or copyright law.\n * Dissemination of this information, reproduction of this material, and copying or distribution of this software\n * is strictly forbidden unless prior written permission is obtained\n * from Pearson Education, Inc.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { SchedulerComponent } from '@paradise/scheduler';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { inject, observer } from 'mobx-react';\nimport Framework, { LoadingHandler, shapes } from '@greenville/framework';\nimport Assignments from './model/Assignments';\nimport * as constants from '../../common/constants';\nimport ErrorCard from '../../common/components/ErrorCard';\n\n/**\n * React Container component for assignment.\n *\n * @author Hari Gangadharan\n */\n@inject('assignmentStatus', 'assignments', 'language')\n@observer\nclass AssignmentContainer extends React.Component {\n  static propTypes = {\n    assignmentStatus: shapes.state.isRequired,\n    match: shapes.match.isRequired,\n    assignments: shapes.modelOf(Assignments).isRequired,\n    language: shapes.language.isRequired,\n    onNavigationChange: PropTypes.func.isRequired,\n    onClose: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      openPopup: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      match, assignments\n    } = this.props;\n    assignments.fetch(match.params.id);\n    Framework.getEventManager().on(constants.ASSIGNMENT_FETCHED, () => {\n      this.setState({ openPopup: true });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      match, assignments\n    } = this.props;\n    if (prevProps.match.params.id !== match.params.id) {\n      assignments.fetch(match.params.id);\n    }\n  }\n\n  render() {\n    const {\n      assignmentStatus, assignments, language, match\n    } = this.props;\n    const { id, productId } = match.params;\n    const errorStatus = (!assignmentStatus.isPending && assignmentStatus.isError\n      && assignments.items && assignments.items.length === 0)\n      ? false : assignmentStatus.isError;\n    const { openPopup } = this.state;\n    const errorCode = assignmentStatus.error && constants.ERROR_CODE_MARIN;\n\n    return (\n      <div>\n        { openPopup && (\n        <Dialog\n          open={this.props.isOpen}\n          onClose={this.props.onClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              <LoadingHandler\n                loading={assignmentStatus.isPending}\n                error={errorStatus}\n                content={(\n                  <SchedulerComponent\n                    data={assignments.items}\n                    locale={language.currentLanguage}\n                    open={this.props.isOpen}\n                    onClose={this.props.onClose}\n                    onPageClick={this.props.onNavigationChange}\n                    onDateChange={dateObject => dateObject}\n                    invisibleBackdrop\n                  />\n              )}\n                loadingContent={\n                  <CircularProgress />\n              }\n                errorContent={\n                  <ErrorCard code={errorCode} courseId={id} productId={productId} />\n              }\n              />\n            </DialogContentText>\n          </DialogContent>\n        </Dialog>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AssignmentContainer);\n"],"sourceRoot":""}